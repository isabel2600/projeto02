pipeline {
  options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
  }

  environment {
    REGISTRY = "655389356257.dkr.ecr.us-east-1.amazonaws.com"
    REGION = "us-east-1"
    CLUSTER = "staging.luby.com.br"
    DOCKER_USER = "AWS"
    YAML_BUCKET = "s3://k8s-yaml.staging.luby.com.br"
    YAML_FILE = "${JOB_NAME}.yaml"
    SECRET_BUCKET = "s3://k8s-secrets.staging.luby.com.br"
    DOMAIN_PREFIX = "web"   
  }

  agent {
    label "worker"
  }

  stages {

    stage("Check S3 bucket") {
      steps {
        script {
          sh '''
            if aws s3 ls ${SECRET_BUCKET} | grep ${JOB_NAME} >/dev/null 2>&1 ; then
              aws s3 sync ${SECRET_BUCKET}/${JOB_NAME} .
            else
              echo "Nenhum secret no bucket."
            fi
            '''
        }
      }
    }

    stage("Check ECR") {
      steps {
        script {
          sh '''
            if aws ecr describe-repositories --repository-names ${JOB_NAME} >/dev/null 2>&1 ; then
              echo "Repositorio ECR ja existe"
            else
              echo "Criando novo repositorio..."
              aws ecr create-repository --repository-name ${JOB_NAME}
              aws ecr put-lifecycle-policy --repository-name ${JOB_NAME} --lifecycle-policy-text "file://lifecycle-policy.json"
            fi
            '''
        }
      }
    }

    stage("Build") {
      steps {
        script {
          sh "yarn install"
          sh "yarn build"
          sh "docker build -t ${JOB_NAME} --no-cache --pull ."
        }
      }
    }

    // esse stage pode ser alterado para cada projeto
    // segue um exemplo de um "smoke test" simples
    // tentar a execução do container e verificar os logs
    stage("Test") {
      steps {
        script {
          // sh 'docker run -d --name ${JOB_NAME}'
          // sh 'sleep 1m'
          // sh 'docker logs ${JOB_NAME}'
          // sh 'docker stop ${JOB_NAME}'
          // sh 'docker rm ${JOB_NAME}

          sh "echo 'Nenhum teste para ser executado.'"

        }
      }
    }

    stage("Push") {
      steps {
        script {
          sh "aws ecr get-login-password --region ${REGION} | docker login --username ${DOCKER_USER} --password-stdin ${REGISTRY}"
          sh "docker tag ${JOB_NAME}:latest ${REGISTRY}/${JOB_NAME}:${BUILD_NUMBER}"
          sh "docker push ${REGISTRY}/${JOB_NAME}:${BUILD_NUMBER}"
        }
      }
    }

      stage("Check cluster") {
        steps {
          script {
          sh "kubectl cluster-info"
          sh "kubectl get nodes"
        }
      }
    }

      stage("Deploy") {
        steps {
          script {
            sh "ECR_CRED=$(jq -r '. | @base64' ~/.docker/config.json)"
            sh "PROJECT_NAME=$(echo ${JOB_NAME} | cut -d '-' -f1)"

            sh '''
              sed -e "s;%JOB_NAME%;${JOB_NAME};g" \
                  -e "s;%ECR_CRED%;${ECR_CRED};g" \
                  -e "s;%REGISTRY%;${REGISTRY};g" \
                  -e "s;%BUILD_NUMBER%;${BUILD_NUMBER};g" \
                  -e "s;%PROJECT_NAME%;${PROJECT_NAME};g" \
                  -e "s;%CLUSTER%;${CLUSTER};g" \
                  -e "s;%DOMAIN_PREFIX%;${DOMAIN_PREFIX};g" \
                  k8s-template.yaml > ${YAML_FILE}
            '''

            sh "kubectl apply -f ${YAML_FILE}"
            sh "aws s3 cp ${YAML_FILE} ${YAML_BUCKET}/${YAML_FILE}"
        }
      }
    }
  }

  post {
    cleanup {
      script {
         try {
            sh "docker stop $(docker ps -q) > /dev/null 2>&1"
          } catch (Exception e) {
            echo "Exception occurred: " + e.toString()
          }

         try {
            sh "docker rm $(docker ps -a -q) > /dev/null 2>&1"
          } catch (Exception e) {
            echo "Exception occurred: " + e.toString()
          }

         try {
            sh "docker rmi -f $(docker images -q)"
          } catch (Exception e) {
            echo "Exception occurred: " + e.toString()
          }   

         try {
            sh "docker system prune -a -f --volumes"
          } catch (Exception e) {
            echo "Exception occurred: " + e.toString()
          }
      }
    }
  }
}